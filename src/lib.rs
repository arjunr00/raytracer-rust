use vec::{ ColorRGB, Ray, Vec3 };
use geom::HittableGroup;

pub mod math;
pub mod vec;
pub mod geom;

/// Creates a String containing a PPM representation of a single pixel
pub fn write_pixel(pixel: &ColorRGB) -> String {
    format!("{} {} {}\n",
        (255.999 * pixel[vec::Color::R]) as u32,
        (255.999 * pixel[vec::Color::G]) as u32,
        (255.999 * pixel[vec::Color::B]) as u32
    )
}

/// Creates a String containing a PPM generated by sending rays to each pixel. The image's
/// contents are described by `world`.
pub fn create_ppm(world: &HittableGroup, width: u32, height: u32, max_colors: u32) -> String {
    let aspect_ratio = f64::from(width) / f64::from(height);
    let vp_y_max = 1.0;
    let vp_x_max = aspect_ratio * vp_y_max;
    let focal_length = 1.0;

    let top_left =
        Vec3::O
        - (Vec3::I * vp_x_max)
        + (Vec3::J * vp_y_max)
        - (Vec3::K * focal_length);

    let mut ppm = format!("P3\n{} {}\n{}\n", width, height, max_colors);
    let total_pixels = width * height;

    for i in 0..height {
        for j in 0..width {
            let u = (j as f64) / f64::from(width - 1);
            let v = (i as f64) / f64::from(height - 1);

            let ray_dir =
                &top_left
                + u * (2.0 * vp_x_max * Vec3::I)
                - v * (2.0 * vp_y_max * Vec3::J);
            let r = Ray::new(&Vec3::O, &ray_dir);

            ppm.push_str(&write_pixel(&r.get_color(world)));

            let pixel_num = j + 1 + (i * width);
            eprint!("\r{}/{} pixels rendered", pixel_num, total_pixels);
        }
    }

    eprintln!("\nDone.");
    ppm
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn basic_image() {
        let expected_output = "P3\n16 16\n255\n155 195 255\n153 194 255\n151 193 255\n150 192 255\n149 191 255\n147 191 255\n147 190 255\n146 190 255\n146 190 255\n147 190 255\n147 191 255\n149 191 255\n150 192 255\n151 193 255\n153 194 255\n155 195 255\n158 197 255\n156 196 255\n155 195 255\n153 194 255\n152 193 255\n151 193 255\n150 192 255\n150 192 255\n150 192 255\n150 192 255\n151 193 255\n152 193 255\n153 194 255\n155 195 255\n156 196 255\n158 197 255\n162 199 255\n160 198 255\n159 198 255\n157 197 255\n156 196 255\n155 195 255\n154 195 255\n154 194 255\n154 194 255\n154 195 255\n155 195 255\n156 196 255\n157 197 255\n159 198 255\n160 198 255\n162 199 255\n167 202 255\n165 201 255\n164 200 255\n162 200 255\n161 199 255\n160 198 255\n159 198 255\n159 197 255\n159 197 255\n159 198 255\n160 198 255\n161 199 255\n162 200 255\n164 200 255\n165 201 255\n167 202 255\n171 205 255\n170 204 255\n169 204 255\n168 203 255\n167 202 255\n166 202 255\n165 201 255\n164 201 255\n164 201 255\n165 201 255\n166 202 255\n167 202 255\n168 203 255\n169 204 255\n170 204 255\n171 205 255\n177 208 255\n176 208 255\n175 207 255\n174 207 255\n173 206 255\n172 206 255\n172 205 255\n171 205 255\n171 205 255\n172 205 255\n172 206 255\n173 206 255\n174 207 255\n175 207 255\n176 208 255\n177 208 255\n183 212 255\n182 211 255\n181 211 255\n181 211 255\n180 210 255\n180 210 255\n179 210 255\n179 210 255\n179 210 255\n179 210 255\n180 210 255\n180 210 255\n181 211 255\n181 211 255\n182 211 255\n183 212 255\n188 215 255\n188 215 255\n188 215 255\n188 215 255\n188 215 255\n187 215 255\n187 215 255\n187 215 255\n187 215 255\n187 215 255\n187 215 255\n188 215 255\n188 215 255\n188 215 255\n188 215 255\n188 215 255\n195 219 255\n195 219 255\n195 219 255\n195 219 255\n195 219 255\n196 220 255\n196 220 255\n196 220 255\n196 220 255\n196 220 255\n196 220 255\n195 219 255\n195 219 255\n195 219 255\n195 219 255\n195 219 255\n200 222 255\n201 223 255\n202 223 255\n202 224 255\n203 224 255\n203 224 255\n204 224 255\n204 225 255\n204 225 255\n204 224 255\n203 224 255\n203 224 255\n202 224 255\n202 223 255\n201 223 255\n200 222 255\n206 226 255\n207 226 255\n208 227 255\n209 228 255\n210 228 255\n211 229 255\n211 229 255\n212 229 255\n212 229 255\n211 229 255\n211 229 255\n210 228 255\n209 228 255\n208 227 255\n207 226 255\n206 226 255\n212 229 255\n213 230 255\n214 231 255\n215 231 255\n216 232 255\n217 233 255\n218 233 255\n219 233 255\n219 233 255\n218 233 255\n217 233 255\n216 232 255\n215 231 255\n214 231 255\n213 230 255\n212 229 255\n216 232 255\n218 233 255\n219 234 255\n221 235 255\n222 235 255\n223 236 255\n224 237 255\n224 237 255\n224 237 255\n224 237 255\n223 236 255\n222 235 255\n221 235 255\n219 234 255\n218 233 255\n216 232 255\n221 235 255\n223 236 255\n224 237 255\n226 238 255\n227 238 255\n228 239 255\n229 240 255\n229 240 255\n229 240 255\n229 240 255\n228 239 255\n227 238 255\n226 238 255\n224 237 255\n223 236 255\n221 235 255\n225 237 255\n227 238 255\n228 239 255\n230 240 255\n231 241 255\n232 241 255\n233 242 255\n233 242 255\n233 242 255\n233 242 255\n232 241 255\n231 241 255\n230 240 255\n228 239 255\n227 238 255\n225 237 255\n228 239 255\n230 240 255\n232 241 255\n233 242 255\n234 243 255\n236 244 255\n236 244 255\n237 244 255\n237 244 255\n236 244 255\n236 244 255\n234 243 255\n233 242 255\n232 241 255\n230 240 255\n228 239 255\n";

        let width: u32 = 16;
        let height: u32 = 16;
        let max_colors = 255;

        let output = create_ppm(width, height, max_colors);

        assert_eq!(output, expected_output);
    }
}
